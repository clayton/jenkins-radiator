{
  "name": "eco",
  "description": "Embedded CoffeeScript templates",
  "author": {
    "name": "Sam Stephenson"
  },
  "version": "1.1.0-rc-3",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/sstephenson/eco/raw/master/LICENSE"
    }
  ],
  "main": "./lib/index.js",
  "bin": {
    "eco": "./bin/eco"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/sstephenson/eco.git"
  },
  "dependencies": {
    "strscan": ">=1.0.1",
    "coffee-script": ">=1.2.0"
  },
  "devDependencies": {
    "nodeunit": ">=0.6.4",
    "express": ">=2.0.0",
    "uglify-js": ">=1.0.0"
  },
  "engine": {
    "node": ">=0.6"
  },
  "readme": "Eco: Embedded CoffeeScript templates\n====================================\n\nEco lets you embed [CoffeeScript](http://coffeescript.org/) logic in\nyour markup. It's like EJS and ERB, but with CoffeeScript inside the\n`<% ... %>`. Use it from [Node.js](http://nodejs.org/) to render your\napplication's views on the server side, or compile your templates\nto JavaScript with the `eco` command-line utility and use them to\ndynamically render views in the browser.\n\nHere's how an Eco template looks:\n\n    <% if @projects.length: %>\n      <% for project in @projects: %>\n        <a href=\"<%= project.url %>\"><%= project.name %></a>\n        <p><%= project.description %></p>\n      <% end %>\n    <% else: %>\n      No projects\n    <% end %>\n\n## Installation ##\n\nTo install the Eco compiler, you'll need [Node.js](http://nodejs.org/)\n0.4 or higher and [npm](http://npmjs.org/) 1.0 or higher. Use npm's\n`-g` flag for access to the `eco` command-line compiler:\n\n    $ npm install -g eco\n\nIf you're using Eco in a Node project, you can omit the `-g` flag to\ninstall it locally into your project's `node_modules` directory.\n\n## Server-side rendering in Node.js ##\n\n\n\n### The Eco API ###\n\n### Eco templates as Node modules ###\n\n### Using Eco with Express ###\n\n## Client-side rendering in the browser ##\n\n### The Eco command-line compiler ###\n\n### Eco templates as Stitch modules ###\n\n### Compiling templates in the browser ###\n\n## Language reference ##\n\nEco's syntax is simple:\n\n* `<% expression %>`: Evaluate a CoffeeScript expression without\n  printing its return value.\n* `<%= expression %>`: Evaluate a CoffeeScript expression, escape its\n  return value, and print it.\n* `<%- expression %>`: Evaluate a CoffeeScript expression and print\n  its return value without escaping it.\n* `<%= @property %>`: Print the escaped value of the property\n  `property` from the context object passed to `render`.\n* `<%= @helper() %>`: Call the helper method `helper` from the context\n  object passed to `render`, then print its escaped return value.\n* `<% @helper -> %>...<% end %>`: Call the helper method `helper` with\n  a function as its first argument. When invoked, the function will\n  capture and return the content `...` inside the tag.\n* `<%%` and `%%>` will result in a literal `<%` and `%>` in the\n  rendered template, respectively.\n\n### A note about whitespace ###\n\nCoffeeScript is whitespace-sensitive, but your templates\naren't. Therefore, Eco code tags that begin an indented CoffeeScript\nblock must be suffixed with a colon. To indicate the end of an\nindented block, use the special tag `<% end %>`. For example:\n\n    <% if @project.isOnHold(): %>\n      On Hold\n    <% end %>\n\nYou don't need to write the `if` and `end` tags on separate lines:\n\n    <% if @project.isOnHold(): %> On Hold <% end %>\n\nAnd you can use the single-line postfix form of `if` as you'd expect:\n\n    <%= \"On Hold\" if @project.isOnHold() %>\n\nCertain forms in CoffeeScript, such as `else`, must be unindented\nfirst. Eco handles that for you automatically:\n\n    <% if @project.isOnHold(): %>\n      On Hold\n    <% else if @project.isArchived(): %>\n      Archived\n    <% end %>\n\n### The context object ###\n\nThe context object you pass to `eco.render()` becomes the value of\n`this` inside your template. You can use CoffeeScript's `@` sigil to\neasily access properties and call helper methods on the context\nobject.\n\n    eco.render \"<p><%= @description %></p>\",\n      description: \"HTML 5 mobile app\"\n\n### Helpers ###\n\nHelper methods on your context object can access other properties on\nthe context object in the same way they're accessed in the template:\nthrough `this`, or with the `@` sigil.\n\n    translations = require \"translations\"\n\n    eco.render \"<span><%= @translate 'common.welcomeText' %></span>\",\n      language:  \"en\"\n      translate: (key) ->\n        translations[@language][key]\n\n### Escaping and unescaping ###\n\nWhen you print an expression in a template with `<%= ... %>`, its\nvalue is HTML-escaped. For example,\n\n    eco.render \"<%= @description %>\",\n      description: \"<strong>HTML 5</strong> mobile app\"\n\nwould render:\n\n    &lt;strong&gt;HTML 5&lt;/strong&gt; mobile app\n\nYou can use the `<%- ... %>` tag to print the value of an expression\nwithout escaping it. So this code:\n\n    eco.render \"<%- @description %>\",\n      description: \"<strong>HTML 5</strong> mobile app\"\n\nwould produce:\n\n    <strong>HTML 5</strong> mobile app\n\nIt is sometimes useful to generate markup in helper methods. The\nspecial `safe` method on the context object tells Eco that the string\ncan be printed in `<%= ... %>` tags without being escaped. You can use\nthis in conjunction with the context object's `escape` method to\nselectively sanitize parts of the string. For example,\n\n    eco.render \"<%= @linkTo @project %>\",\n      project: { id: 4, name: \"Crate & Barrel\" }\n      linkTo: (project) ->\n        url  = \"/projects/#{project.id}\"\n        name = @escape project.name\n        @safe \"<a href='#{url}'>#{name}</a>\"\n\nwould render:\n\n    <a href='/projects/4'>Crate &amp; Barrel</a>\n\n### Custom escape helpers ###\n\nBy default, Eco's `escape` method takes a string and returns an\nHTML-escaped string. You can override this behavior to escape for\nformats other than HTML, or to bypass escaping entirely. For example,\n\n    eco.render \"From: <%= @address %>\",\n      address: \"Sam Stephenson <sstephenson@gmail.com>\"\n      escape:  (string) -> string\n\nwould return:\n\n    From: Sam Stephenson <sstephenson@gmail.com>\n\n### Blocks and capturing ###\n\nYou can capture blocks of a template by wrapping them in a function\ndefinition. For example, rendering this template:\n\n    <% div = (contents) => %>\n      <div><%- contents %></div>\n    <% end %>\n    <%= div \"Hello\" %>\n\nwould produce:\n\n    <div>Hello</div>\n\nCaptured blocks can be passed to helper methods too. In this example,\nthe capture body is passed to the `formFor` helper as its last\nargument. Then the `formFor` helper calls this argument to produce a\nvalue.\n\n    template = \"\"\"\n      <%= @formFor @project, (form) => %>\n        <label>Name:</label>\n        <%= form.textField \"name\" %>\n      <% end %>\n    \"\"\"\n\n    eco.render template,\n      project: { id: 1, name: \"Mobile app\" }\n      formFor: (project, yield) ->\n        form =\n          textField: (attribute) =>\n            name  = @escape attribute\n            value = @escape @project[attribute]\n            @safe \"<input type='text' name='#{name}' value='#{value}'>\"\n\n        url  = \"/projects/#{@project.id}\"\n        body = yield form\n        @safe \"<form action='#{url}' method='post'>#{body}</form>\"\n\nNote: In general, you should use CoffeeScript's fat arrow (`=>`) to\ndefine capturing functions so that you have access to the context\nobject inside the captured block. Treat the plain arrow (`->`) as an\noptimization for when you are certain the capture body will not need\nto reference properties or helper methods on the context object.\n\n\n## Contributing ##\n\nYou can check out the Eco source code from GitHub:\n\n    $ git clone http://github.com/sstephenson/eco.git\n\nTo run Eco's test suite, install\n[nodeunit](http://github.com/caolan/nodeunit) and run `cake test`.\n\nReport bugs on the [GitHub issue tracker](http://github.com/sstephenson/eco/issues).\n\n## License ##\n\n(The MIT License)\n\nCopyright (c) 2011 Sam Stephenson <sstephenson@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n## Special thanks ##\n\n* Jeremy Ashkenas <jashkenas@gmail.com>\n* Josh Peek <josh@joshpeek.com>\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/sstephenson/eco/issues"
  },
  "homepage": "https://github.com/sstephenson/eco",
  "_id": "eco@1.1.0-rc-3",
  "dist": {
    "shasum": "5e4127b0057283b4cb0d220589479efb382a02eb"
  },
  "_from": "eco@~1.1.0-rc-3",
  "_resolved": "https://registry.npmjs.org/eco/-/eco-1.1.0-rc-3.tgz"
}
